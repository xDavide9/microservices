#  services are containers which are created from an image; you can specify environment configuration,
#  volumes, ports, and networks for them. The image describes what the container is actually doing (e.g. running a
#  postgres server), environment is specific configuration, volumes allow to back up data in case of container destruction
#  networks allow seamless communication between containers
services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: amigoscode
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
#     I want to back up the postgres data stored in the directory specified above in my local machine through the postgres
#     named volume
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

# this network is the url to input in pgadmin to connect to the database server where all the postgres databases are created
networks:
  postgres:
    driver: bridge

# these named volumes are managed by docker on my local machine to back up certain data of container
volumes:
  postgres:
  pgadmin:
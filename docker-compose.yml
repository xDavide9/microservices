#  services are containers which are created from an image; you can specify environment configuration,
#  volumes, ports, and networks for them. The image describes what the container is actually doing (e.g. running a
#  postgres server), environment is specific configuration, volumes allow to back up data in case of container destruction
#  networks allow seamless communication between containers
services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: amigoscode
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
#     I want to back up the postgres data stored in the directory specified above in my local machine through the postgres
#     named volume
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - spring
  rabbitmq:
    image: rabbitmq:3.9.11-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - spring
  eureka-server:  # these are containers that I run from my own images of microservices
    # created using jib plugin, the spring applications need to run in the "docker" spring profile because
    # in application-docker.yml they are configured to communicate to each other with networks while
    # in application.yml they are configured to communicate to each other with localhost
    image: xdavide9/eureka-server:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
    depends_on:
      - zipkin
  apigw:
    image: xdavide9/apigw:latest
    container_name: apigw
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
    depends_on:
      - zipkin
      - eureka-server
  customer:
    image: xdavide9/customer:latest
    container_name: customer
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
    depends_on:
      - zipkin
      - eureka-server
      - postgres
      - rabbitmq
  fraud:
    image: xdavide9/fraud:latest
    container_name: fraud
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
    depends_on:
      - zipkin
      - eureka-server
      - postgres
      - rabbitmq
  notification:
    image: xdavide9/notification:latest
    container_name: notification
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
    depends_on:
      - zipkin
      - eureka-server
      - postgres
      - rabbitmq

# networks allow communication between the containers they are added to
# by just specifying their name as host
# e.g. http://zipkin:9411 where zipkin is the name of the service (not the container, that one is just for displaying, anyways they can be named the same using container_name attribute) and not of the network
networks:
  postgres:
    driver: bridge
  spring:
    driver: bridge

# these named volumes are managed by docker on my local machine to back up certain data of container
volumes:
  postgres:
  pgadmin: